{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { CSSTransition } from \"react-transition-group\";\nexport default function Modal(props) {\n  var _props$in;\n\n  var _useState = useState(function () {\n    return false;\n  }),\n      Ready = _useState[0],\n      setReady = _useState[1];\n\n  var _useState2 = useState(function () {\n    return false;\n  }),\n      Display = _useState2[0],\n      setDisplay = _useState2[1];\n\n  var _useState3 = useState(function () {\n    return true;\n  }),\n      Allow = _useState3[0],\n      setAllow = _useState3[1];\n\n  var ModalRef = useRef(null);\n  var idModal = \"modal\";\n\n  function toggleAllow() {\n    setAllow(!Allow);\n  }\n\n  function toggle() {\n    if (props.toggleModal) props.toggleModal();else setDisplay(!Display);\n  }\n\n  function handleClickOutside(event) {\n    var _ModalRef$current, _ModalRef$current$con;\n\n    if ((ModalRef === null || ModalRef === void 0 ? void 0 : ModalRef.current) && !(ModalRef === null || ModalRef === void 0 ? void 0 : (_ModalRef$current = ModalRef.current) === null || _ModalRef$current === void 0 ? void 0 : (_ModalRef$current$con = _ModalRef$current.contains) === null || _ModalRef$current$con === void 0 ? void 0 : _ModalRef$current$con.call(_ModalRef$current, event.target)) && Allow) toggle();\n  }\n\n  useEffect(function () {\n    var rootContainer = document.createElement(\"div\");\n    rootContainer.setAttribute(\"id\", idModal);\n    setReady(true);\n    if (!document.getElementById(idModal)) document.body.appendChild(rootContainer);\n  }, []);\n  useEffect(function () {\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return function () {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  });\n  useEffect(function () {\n    if (Display || props[\"in\"]) {\n      document.querySelector(\"body\").classList.add(\"modal-open\");\n    }\n\n    return function () {\n      document.querySelector(\"body\").classList.remove(\"modal-open\");\n    };\n  }, [Display, props[\"in\"]]);\n  if (!Ready) return null;\n  return __jsx(React.Fragment, null, props.children(toggle), document && document.getElementById(idModal) && __jsx(\"div\", null, createPortal(__jsx(CSSTransition, {\n    \"in\": (_props$in = props[\"in\"]) !== null && _props$in !== void 0 ? _props$in : Display,\n    timeout: 500,\n    onExit: toggleAllow,\n    onExited: toggleAllow,\n    classNames: \"overlay\",\n    unmountOnExit: true\n  }, __jsx(\"div\", {\n    className: \"overlay fixed inset-0 h-screen z-50\"\n  }, __jsx(\"div\", {\n    className: \"bg-black opacity-25 inset-0 absolute z-10\"\n  }), __jsx(\"div\", {\n    className: \"absolute z-20 flex items-center justify-center inset-0\"\n  }, __jsx(\"div\", {\n    style: props.modalStyle,\n    ref: ModalRef,\n    className: \"bg-white shadow-2xl w-full md:w-auto max-h-2xl md:max-w-3xl \"\n  }, __jsx(\"div\", {\n    className: \"relative\"\n  }, __jsx(\"span\", {\n    className: \"modal-close\",\n    onClick: toggle\n  })), props.content(toggle))))), document.getElementById(idModal))));\n}\nModal.defaultProps = {};","map":null,"metadata":{},"sourceType":"module"}